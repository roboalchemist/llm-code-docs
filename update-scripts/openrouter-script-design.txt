OpenRouter Models Extraction Script Design
===========================================

## API Details

**Endpoint URL:**
https://openrouter.ai/api/v1/models

**Authentication:**
- Method: Bearer token in Authorization header
- Format: `Authorization: Bearer {OPENROUTER_API_KEY}`
- Environment variable: OPENROUTER_API_KEY

**HTTP Method:**
GET (no parameters required for basic model list)

## Response Structure

**Format:** JSON

**Top-level structure:**
```json
{
  "data": [
    {model1},
    {model2},
    ...
  ]
}
```

**Model object fields** (13 total):
1. id (string) - Model identifier (e.g., "anthropic/claude-sonnet-4.5")
2. canonical_slug (string) - Canonical identifier
3. hugging_face_id (string) - Hugging Face model ID (may be empty)
4. name (string) - Human-readable model name
5. created (integer) - Unix timestamp
6. description (string) - Detailed model description (can be very long)
7. context_length (integer) - Maximum context window
8. architecture (object) - Contains:
   - modality (string) - e.g., "text->text", "text+image->text"
   - input_modalities (array) - e.g., ["text", "image", "file"]
   - output_modalities (array) - e.g., ["text"]
   - tokenizer (string) - e.g., "Claude", "GPT", "Other"
   - instruct_type (string/null) - Instruction format
9. pricing (object) - Contains:
   - prompt (string) - Cost per prompt token
   - completion (string) - Cost per completion token
   - request (string) - Cost per request
   - image (string) - Cost per image
   - web_search (string) - Cost for web search
   - internal_reasoning (string) - Cost for reasoning tokens
   - input_cache_read (string, optional) - Cache read cost
   - input_cache_write (string, optional) - Cache write cost
10. top_provider (object) - Contains:
    - context_length (integer)
    - max_completion_tokens (integer/null)
    - is_moderated (boolean)
11. per_request_limits (object/null) - Request limits if applicable
12. supported_parameters (array) - List of supported API parameters
13. default_parameters (object) - Default parameter values

**Current model count:** 330 models (as of 2025-10-02)

## Pagination

**Required:** NO
- The endpoint returns all models in a single response
- No pagination headers or parameters observed
- Response is manageable size (~1-2MB)

## Rate Limiting

**Observed:** None specified in documentation
- No rate limit headers visible in test response
- Recommend adding polite delays between requests anyway (1-2 seconds)
- Consider implementing retry logic with exponential backoff for robustness

## Output Format Decision

**Recommendation: Dual format (Markdown + JSON)**

### Primary format: Markdown (for human readability)
**Rationale:**
- Aligns with existing documentation structure in this repo
- Easy to read and search for humans
- Supports rich formatting for descriptions
- Consistent with CircuitPython, Claude SDK, Notion docs approach

**Suggested structure:**
```markdown
# OpenRouter Models Catalog

Last updated: {timestamp}
Total models: {count}

---

## Model: {name}

**ID:** {id}
**Provider:** {extracted from id}
**Context Length:** {context_length} tokens
**Created:** {formatted_date}

### Description
{description}

### Pricing
- Prompt: ${prompt} per token
- Completion: ${completion} per token
- Context: {context_length} tokens
- Max completion: {max_completion_tokens} tokens

### Architecture
- Modality: {modality}
- Input: {input_modalities}
- Output: {output_modalities}
- Tokenizer: {tokenizer}

### Capabilities
- Supported parameters: {supported_parameters}
- Default temperature: {default_parameters.temperature}
- Moderated: {top_provider.is_moderated}

---
```

### Secondary format: JSON (for programmatic use)
**Rationale:**
- Preserve complete API response for tools/scripts
- Enable filtering, sorting, comparison programmatically
- No data loss from transformation

**Suggested location:**
- `/openrouter-models/models-catalog.json` (full API response)
- `/openrouter-models/README.md` (formatted markdown)

## Script Architecture

**Language:** Python 3
**Dependencies:**
- requests (HTTP client)
- json (response parsing)
- pathlib (file handling)
- datetime (timestamp formatting)

**Script structure:**

```python
#!/usr/bin/env python3
"""
OpenRouter Models Catalog Extractor
Fetches the complete OpenRouter models catalog via API
"""

import os
import sys
import json
import requests
from pathlib import Path
from datetime import datetime

# Configuration
API_ENDPOINT = "https://openrouter.ai/api/v1/models"
OUTPUT_DIR = Path(__file__).parent.parent / "openrouter-models"
TIMEOUT = 10  # seconds

def get_api_key():
    """Get API key from environment variable."""
    key = os.environ.get('OPENROUTER_API_KEY')
    if not key:
        print("ERROR: OPENROUTER_API_KEY environment variable not set")
        sys.exit(1)
    return key

def fetch_models(api_key):
    """Fetch models from OpenRouter API."""
    headers = {
        "Authorization": f"Bearer {api_key}"
    }
    response = requests.get(API_ENDPOINT, headers=headers, timeout=TIMEOUT)
    response.raise_for_status()
    return response.json()

def save_json(data, output_path):
    """Save raw JSON response."""
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def format_markdown(data):
    """Convert JSON data to formatted markdown."""
    models = data['data']
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')

    # Header
    md = f"# OpenRouter Models Catalog\n\n"
    md += f"**Last Updated:** {timestamp}\n"
    md += f"**Total Models:** {len(models)}\n\n"
    md += "---\n\n"

    # Each model
    for model in models:
        md += format_model_section(model)

    return md

def format_model_section(model):
    """Format a single model as markdown section."""
    # Implementation details...
    pass

def main():
    """Main extraction function."""
    print("OpenRouter Models Catalog Extraction")
    print("=" * 60)

    # Get API key
    api_key = get_api_key()

    # Create output directory
    OUTPUT_DIR.mkdir(exist_ok=True)

    # Fetch models
    print(f"Fetching models from {API_ENDPOINT}...")
    data = fetch_models(api_key)

    # Save JSON
    json_path = OUTPUT_DIR / "models-catalog.json"
    save_json(data, json_path)
    print(f"✓ Saved JSON: {json_path}")

    # Save Markdown
    md_path = OUTPUT_DIR / "README.md"
    markdown = format_markdown(data)
    with open(md_path, 'w', encoding='utf-8') as f:
        f.write(markdown)
    print(f"✓ Saved Markdown: {md_path}")

    print(f"\nTotal models: {len(data['data'])}")
    print("✓ Extraction complete")

if __name__ == "__main__":
    main()
```

## Error Handling Requirements

1. **API Key Validation:**
   - Check OPENROUTER_API_KEY exists before making request
   - Provide clear error message if missing
   - Exit with non-zero status code

2. **Network Errors:**
   - Handle connection timeout (10 seconds)
   - Handle HTTP errors (4xx, 5xx)
   - Provide informative error messages
   - Consider retry logic for transient errors

3. **Response Validation:**
   - Verify response is valid JSON
   - Check for expected 'data' field
   - Validate model structure
   - Handle unexpected fields gracefully

4. **File System Errors:**
   - Handle directory creation failures
   - Handle file write permission errors
   - Ensure atomic writes (write to temp, then rename)

## Testing Strategy

1. **Pre-deployment test:**
   - Verify API key exists and is valid
   - Test with actual API call (done - 330 models returned)
   - Verify JSON structure matches expectations

2. **Post-deployment test:**
   - Run full extraction
   - Verify JSON file size is reasonable (>100KB)
   - Verify markdown file is generated
   - Check model count matches API response
   - Spot-check 5-10 model entries for completeness

3. **Edge cases:**
   - Missing optional fields (e.g., hugging_face_id, input_cache_read)
   - Null values in various fields
   - Very long descriptions (some >1000 chars)
   - Special characters in descriptions

## Integration with update.sh

The master update script should:
1. Check for OPENROUTER_API_KEY before running
2. Run the OpenRouter extraction script
3. Report success/failure
4. Continue with other extractions regardless

## Maintenance Considerations

1. **API changes:**
   - OpenRouter may add new model fields
   - Script should handle unknown fields gracefully
   - Consider versioning the output format

2. **Model count growth:**
   - Currently 330 models, likely to grow
   - Single-file approach should work up to ~1000 models
   - May need pagination if API adds it in future

3. **Update frequency:**
   - Models are added frequently
   - Recommend weekly updates
   - Consider adding timestamp comparison to detect changes

## Additional Features (Optional)

1. **Filtering:**
   - Allow filtering by provider (e.g., only Anthropic models)
   - Filter by modality (text-only vs multimodal)
   - Filter by price range

2. **Statistics:**
   - Count models by provider
   - Average pricing analysis
   - Context length distribution

3. **Comparison:**
   - Diff between runs to detect new/removed models
   - Track pricing changes over time
   - Generate changelog

4. **Search:**
   - Build search index for models
   - Enable querying by capability
   - Tag models by use case
